import fs from 'fs/promises';
import path from 'path';

const ProductDetailsPage = (props) => {
  const { product } = props;

  return (
    <>
      <h1>{product.title}</h1>
      <p>{product.description}</p>
    </>
  );
};

/**
 *
 * So what's up with this getStaticPaths is required error,
 * this error actually tells the solution, well
 * Keep in mind currently next-js is pre-generating all the
 * the pages and i mentioned that it would pre-generated
 * pages by default, it turns out this is not the case if
 * you have a dynamic page so where the name of the component
 * page has such square brackets if you have a dynamic segment
 * leading to that page, if you have that the default behavior
 * is not to pre-generate the page, because keep in mind that
 * technically for this page we won't just have one page but
 * multiple pages for different id's we have technically
 * different pages which have kind of the same frame and the
 * same general HTML content but different data, this page
 * cab be loaded /p1 or /p2 or so on, so next-js does not
 * know in advance how many pages it needs to be pre-generate
 * for this dynamic page,  and because it does not know that
 * dynamic pages like this are not pre-generated by default
 * instead they are always generated just in time on the server
 * which is why it worked before but it's now not working any
 * because we added getStaticProps and as i mentioned when you
 * add this function to a page component file then you tell
 * next-js that you want to pre-render this page in advance
 * for index.js file that didn't make a difference there it was
 * default anyways but for this dynamic page it does make a
 * difference because there it was not the default, for the
 * reasons mentioned next-js has no chance of knowing how many
 * pages you need and which concrete values of this dynamic
 * segment you need, that's why for such dynamic routes we
 * need to give next-js more information.
 *
 * - We can also tell next-js which paths, so which instances
 * of a dynamic page should be pre-generated, because here we
 * don't just need data, we also need to let next-js know which
 * id values which dynamic segment values will be available
 * and for which values a page should be pre-generated.
 * so that multiple instances of that page blue-print can be
 * pre-generated by next-js and we do inform next-js about this
 * with another function we can add in this page file and that's
 * the getStaticPaths function which also is async.
 *
 */

export async function getStaticProps(context) {
  const { params } = context;

  const productId = params.pid;

  const filePath = path.join(process.cwd(), 'data', 'dummy-data.json');
  const json = await fs.readFile(filePath);
  const data = JSON.parse(json);

  const product = data.products.find((item) => item.id === productId);

  return {
    props: {
      product,
    },
  };
}

/**
 * Now the goal of this function is to tell NextJS which
 * instances of this dynamic page should pre-generated
 * therefore this should return an object, just as
 * getStaticProps, but an object with different kind of
 * values, an object where you have a paths key and that's
 * now an array, an array full of object's so that is a
 * given structure, which you must return here, now in this
 * object, you must add a params key now and that holds
 * another object where you have a bunch of key value
 * pairs, where the keys are all the different dynamic
 * segment identifiers that might lead to this page, if
 * that would be nested deeper in a folder, where the
 * folder name is also dynamic you could have multiple
 * identifiers here it's only one which is pid and the
 * values are then the concrete values for which this
 * page should be generated, so here we should know we
 * generate this page three times for p1,p2 and p3 as values
 * for this dynamic page identifier here and set the pid
 * vales, now this tells next-js that this dynamic page here
 * should be pre-generated three times with these three values
 * as a value for this dynamic segment identifier and then
 * next-js will call getStaticProps three times for these different
 * ids and we then we can extract that ids on getStaticProps
 */

export async function getStaticPaths() {
  return {
    paths: [
      {
        params: { pid: 'p1' },
      },
      {
        params: { pid: 'p2' },
      },
      {
        params: { pid: 'p3' },
      },
    ],

    fallback: false,
  };
}

export default ProductDetailsPage;
